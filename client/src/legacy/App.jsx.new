import React, { Suspense } from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import { useAuth } from "./context/index.js";
import LoadingSpinner from "./components/LoadingSpinner";
import ErrorBoundary from "./components/ErrorBoundary";
import Login from "./components/Login";
import RegistrationForm from "./components/RegistrationForm";
import "./App.css";

// Lazy load dashboard components
const CustomerDashboard = React.lazy(() => import('./components/CustomerDashboard'));
const AgentDashboard = React.lazy(() => import('./components/AgentDashboard'));
const AdminDashboard = React.lazy(() => import('./components/AdminDashboard'));

// Protected Route Component
const ProtectedRoute = ({ element, allowedRoles }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="loading-container" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <LoadingSpinner size="large" />
      </div>
    );
  }

  if (!user || !allowedRoles.includes(user.role)) {
    return <Navigate to="/login" replace />;
  }

  return (
    <Suspense fallback={
      <div className="loading-container" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <LoadingSpinner size="large" />
      </div>
    }>
      {typeof element === 'function' ? element() : element}
    </Suspense>
  );
};

function App() {
  return (
    <ErrorBoundary>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<RegistrationForm />} />

        {/* Protected Routes */}
        <Route
          path="/customer/dashboard"
          element={
            <ProtectedRoute
              element={<CustomerDashboard />}
              allowedRoles={["customer"]}
            />
          }
        />
        <Route
          path="/agent/dashboard"
          element={
            <ProtectedRoute
              element={<AgentDashboard />}
              allowedRoles={["agent"]}
            />
          }
        />
        <Route
          path="/admin/dashboard"
          element={
            <ProtectedRoute
              element={<AdminDashboard />}
              allowedRoles={["admin"]}
            />
          }
        />

        {/* Redirect root to login */}
        <Route path="/" element={<Navigate to="/login" replace />} />
      </Routes>
    </ErrorBoundary>
  );
}

export default App;
